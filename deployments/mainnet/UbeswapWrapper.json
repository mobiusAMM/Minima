{
  "address": "0xE63924d5072bce55f9dEF42B0d553B5176448974",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "addTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "removeTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ubeswap",
      "outputs": [
        {
          "internalType": "contract IUbeswapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7bdeb97f7410689caaf87d67746a16f53ab66854372c82a01090ddc2e54939d",
  "receipt": {
    "to": null,
    "from": "0xCD943EE26221AC3e6e7f3e38598F2b08BAEA87DD",
    "contractAddress": "0xE63924d5072bce55f9dEF42B0d553B5176448974",
    "transactionIndex": 3,
    "gasUsed": "894800",
    "logsBloom": "0x
    "blockHash": "0x8e27cca96a6a0191e867e55cf358827cf3d50128013665d44556dff87a4da383",
    "transactionHash": "0xf7bdeb97f7410689caaf87d67746a16f53ab66854372c82a01090ddc2e54939d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 11044774,
        "transactionHash": "0xf7bdeb97f7410689caaf87d67746a16f53ab66854372c82a01090ddc2e54939d",
        "address": "0xE63924d5072bce55f9dEF42B0d553B5176448974",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd943ee26221ac3e6e7f3e38598f2b08baea87dd"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x8e27cca96a6a0191e867e55cf358827cf3d50128013665d44556dff87a4da383"
      }
    ],
    "blockNumber": 11044774,
    "cumulativeGasUsed": "1446999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "363879559355511f2c2861c9db5add6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"addTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"removeTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubeswap\",\"outputs\":[{\"internalType\":\"contract IUbeswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AMMs/UbeswapWrapper.sol\":\"UbeswapWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/AMMs/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IWrapper {\\n  // function getQuotes(address tokenIn, uint256 amountIn)\\n  //   external\\n  //   view\\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut);\\n\\n  function getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe28ad8a2e64da6b69dd248a3eeff8544af45bf910ad0d3d0a1e53318a9389e17\",\"license\":\"ISC\"},\"contracts/AMMs/UbeswapWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWrapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IUbeswapRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountsOut(uint256 amountIn, address[] memory path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function pairFor(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address);\\n}\\n\\ninterface IPair {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    );\\n}\\n\\ncontract UbeswapWrapper is IWrapper, Ownable {\\n  IUbeswapRouter public constant ubeswap =\\n    IUbeswapRouter(address(0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121));\\n  mapping(address => mapping(address => bool)) supportedPair;\\n\\n  function _getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) internal view returns (uint256) {\\n    if (!supportedPair[tokenIn][tokenOut]) {\\n      return 0;\\n    }\\n    IPair pair = IPair(ubeswap.pairFor(tokenIn, tokenOut));\\n    (uint256 reserveIn, uint256 reserveOut, ) = pair.getReserves();\\n    if (tokenIn != pair.token0()) {\\n      uint256 temp = reserveIn;\\n      reserveIn = reserveOut;\\n      reserveOut = temp;\\n    }\\n    return ubeswap.getAmountOut(amountIn, reserveIn, reserveOut);\\n  }\\n\\n  function getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view override returns (uint256) {\\n    return _getQuote(tokenIn, tokenOut, amountIn);\\n  }\\n\\n  // function getQuotes(address tokenIn, uint256 amountIn)\\n  //   external\\n  //   view\\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut)\\n  // {\\n  //   tokensOut = supportedTokens;\\n  //   expectedOut = new uint256[](supportedTokens.length);\\n\\n  //   for (uint256 i = 0; i < supportedTokens.length; i++) {\\n  //     address tokenOut = supportedTokens[i];\\n  //     if (tokenOut == tokenIn) {\\n  //       expectedOut[i] = 0;\\n  //     } else {\\n  //       expectedOut[i] = _getQuote(tokenIn, tokenOut, amountIn);\\n  //     }\\n  //   }\\n  // }\\n\\n  function addTokenPair(address token1, address token2) external onlyOwner {\\n    supportedPair[token1][token2] = true;\\n    supportedPair[token2][token1] = true;\\n  }\\n\\n  function removeTokenPair(address token1, address token2) external onlyOwner {\\n    supportedPair[token1][token2] = false;\\n    supportedPair[token2][token1] = false;\\n  }\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut\\n  ) external override returns (uint256) {\\n    address[] memory path = new address[](2);\\n    path[0] = tokenIn;\\n    path[1] = tokenOut;\\n    uint256 time = block.timestamp;\\n    IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\\n    require(\\n      IERC20(tokenIn).approve(address(ubeswap), amountIn),\\n      \\\"Approval failed\\\"\\n    );\\n    uint256[] memory amounts = ubeswap.swapExactTokensForTokens(\\n      amountIn,\\n      minAmountOut,\\n      path,\\n      msg.sender,\\n      time + 30\\n    );\\n    return amounts[amounts.length - 1];\\n  }\\n}\\n\",\"keccak256\":\"0x8bc88f1f3491ec71539fef5fe596295cc742d4a33401d47491cfaf0cd00df725\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ede806100896000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c515ee231161005b578063c515ee23146100d0578063df1c8c17146100f0578063f2fde38b14610103578063fe0291561461011657610088565b8063715018a61461008d5780638da5cb5b14610097578063a356ce58146100b5578063a7c87ec2146100bd575b600080fd5b610095610129565b005b61009f61017d565b6040516100ac9190610c43565b60405180910390f35b61009f61018c565b6100956100cb366004610a46565b6101a4565b6100e36100de366004610a7e565b610251565b6040516100ac9190610d77565b6100956100fe366004610a46565b610268565b610095610111366004610a0e565b610311565b6100e3610124366004610abe565b610382565b6101316106ce565b6001600160a01b031661014261017d565b6001600160a01b0316146101715760405162461bcd60e51b815260040161016890610d42565b60405180910390fd5b61017b60006106d2565b565b6000546001600160a01b031690565b73e3d8bd6aed4f159bc8000a9cd47cffdb95f9612181565b6101ac6106ce565b6001600160a01b03166101bd61017d565b6001600160a01b0316146101e35760405162461bcd60e51b815260040161016890610d42565b6001600160a01b03918216600081815260016020818152604080842095909616835293845284822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00908116831790915581855285832093835292909352929092208054909216179055565b600061025e84848461073a565b90505b9392505050565b6102706106ce565b6001600160a01b031661028161017d565b6001600160a01b0316146102a75760405162461bcd60e51b815260040161016890610d42565b6001600160a01b03918216600081815260016020818152604080842095909616835293845284822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009081169091559084528482209282529190925291902080549091169055565b6103196106ce565b6001600160a01b031661032a61017d565b6001600160a01b0316146103505760405162461bcd60e51b815260040161016890610d42565b6001600160a01b0381166103765760405162461bcd60e51b815260040161016890610cae565b61037f816106d2565b50565b6040805160028082526060820183526000928392919060208301908036833701905050905085816000815181106103e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061043d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f23b872dd00000000000000000000000000000000000000000000000000000000815242918816906323b872dd9061049690339030908a90600401610c71565b602060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e89190610bbd565b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0388169063095ea7b3906105449073e3d8bd6aed4f159bc8000a9cd47cffdb95f96121908990600401610c95565b602060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190610bbd565b6105b25760405162461bcd60e51b815260040161016890610d0b565b600073e3d8bd6aed4f159bc8000a9cd47cffdb95f961216338ed1739878786336105dd88601e610e06565b6040518663ffffffff1660e01b81526004016105fd959493929190610d80565b600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106719190810190610b03565b905080600182516106829190610e1e565b815181106106b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519350505050949350505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600090815260016020908152604080832093861683529290529081205460ff1661077157506000610261565b6040517f96ed28f900000000000000000000000000000000000000000000000000000000815260009073e3d8bd6aed4f159bc8000a9cd47cffdb95f96121906396ed28f9906107c69088908890600401610c57565b60206040518083038186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190610a2a565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190610bdd565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190610a2a565b6001600160a01b0316876001600160a01b03161461093c57905b6040517f054d50d400000000000000000000000000000000000000000000000000000000815273e3d8bd6aed4f159bc8000a9cd47cffdb95f961219063054d50d49061099090889086908690600401610df0565b60206040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190610c2b565b979650505050505050565b80516dffffffffffffffffffffffffffff81168114610a0957600080fd5b919050565b600060208284031215610a1f578081fd5b813561026181610e93565b600060208284031215610a3b578081fd5b815161026181610e93565b60008060408385031215610a58578081fd5b8235610a6381610e93565b91506020830135610a7381610e93565b809150509250929050565b600080600060608486031215610a92578081fd5b8335610a9d81610e93565b92506020840135610aad81610e93565b929592945050506040919091013590565b60008060008060808587031215610ad3578081fd5b8435610ade81610e93565b93506020850135610aee81610e93565b93969395505050506040820135916060013590565b60006020808385031215610b15578182fd5b825167ffffffffffffffff80821115610b2c578384fd5b818501915085601f830112610b3f578384fd5b815181811115610b5157610b51610e64565b83810260405185828201018181108582111715610b7057610b70610e64565b604052828152858101935084860182860187018a1015610b8e578788fd5b8795505b83861015610bb0578051855260019590950194938601938601610b92565b5098975050505050505050565b600060208284031215610bce578081fd5b81518015158114610261578182fd5b600080600060608486031215610bf1578283fd5b610bfa846109eb565b9250610c08602085016109eb565b9150604084015163ffffffff81168114610c20578182fd5b809150509250925092565b600060208284031215610c3c578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015610dcf5784516001600160a01b031683529383019391830191600101610daa565b50506001600160a01b03969096166060850152505050608001529392505050565b9283526020830191909152604082015260600190565b60008219821115610e1957610e19610e35565b500190565b600082821015610e3057610e30610e35565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811461037f57600080fdfea264697066735822122034de7fc6a3254453abb3c60f60d00ff90336e5c5cbf37ee1e54e84142fc53e1564736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c515ee231161005b578063c515ee23146100d0578063df1c8c17146100f0578063f2fde38b14610103578063fe0291561461011657610088565b8063715018a61461008d5780638da5cb5b14610097578063a356ce58146100b5578063a7c87ec2146100bd575b600080fd5b610095610129565b005b61009f61017d565b6040516100ac9190610c43565b60405180910390f35b61009f61018c565b6100956100cb366004610a46565b6101a4565b6100e36100de366004610a7e565b610251565b6040516100ac9190610d77565b6100956100fe366004610a46565b610268565b610095610111366004610a0e565b610311565b6100e3610124366004610abe565b610382565b6101316106ce565b6001600160a01b031661014261017d565b6001600160a01b0316146101715760405162461bcd60e51b815260040161016890610d42565b60405180910390fd5b61017b60006106d2565b565b6000546001600160a01b031690565b73e3d8bd6aed4f159bc8000a9cd47cffdb95f9612181565b6101ac6106ce565b6001600160a01b03166101bd61017d565b6001600160a01b0316146101e35760405162461bcd60e51b815260040161016890610d42565b6001600160a01b03918216600081815260016020818152604080842095909616835293845284822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00908116831790915581855285832093835292909352929092208054909216179055565b600061025e84848461073a565b90505b9392505050565b6102706106ce565b6001600160a01b031661028161017d565b6001600160a01b0316146102a75760405162461bcd60e51b815260040161016890610d42565b6001600160a01b03918216600081815260016020818152604080842095909616835293845284822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009081169091559084528482209282529190925291902080549091169055565b6103196106ce565b6001600160a01b031661032a61017d565b6001600160a01b0316146103505760405162461bcd60e51b815260040161016890610d42565b6001600160a01b0381166103765760405162461bcd60e51b815260040161016890610cae565b61037f816106d2565b50565b6040805160028082526060820183526000928392919060208301908036833701905050905085816000815181106103e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061043d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040517f23b872dd00000000000000000000000000000000000000000000000000000000815242918816906323b872dd9061049690339030908a90600401610c71565b602060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e89190610bbd565b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0388169063095ea7b3906105449073e3d8bd6aed4f159bc8000a9cd47cffdb95f96121908990600401610c95565b602060405180830381600087803b15801561055e57600080fd5b505af1158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190610bbd565b6105b25760405162461bcd60e51b815260040161016890610d0b565b600073e3d8bd6aed4f159bc8000a9cd47cffdb95f961216338ed1739878786336105dd88601e610e06565b6040518663ffffffff1660e01b81526004016105fd959493929190610d80565b600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106719190810190610b03565b905080600182516106829190610e1e565b815181106106b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519350505050949350505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808416600090815260016020908152604080832093861683529290529081205460ff1661077157506000610261565b6040517f96ed28f900000000000000000000000000000000000000000000000000000000815260009073e3d8bd6aed4f159bc8000a9cd47cffdb95f96121906396ed28f9906107c69088908890600401610c57565b60206040518083038186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190610a2a565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561085457600080fd5b505afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190610bdd565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190610a2a565b6001600160a01b0316876001600160a01b03161461093c57905b6040517f054d50d400000000000000000000000000000000000000000000000000000000815273e3d8bd6aed4f159bc8000a9cd47cffdb95f961219063054d50d49061099090889086908690600401610df0565b60206040518083038186803b1580156109a857600080fd5b505afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190610c2b565b979650505050505050565b80516dffffffffffffffffffffffffffff81168114610a0957600080fd5b919050565b600060208284031215610a1f578081fd5b813561026181610e93565b600060208284031215610a3b578081fd5b815161026181610e93565b60008060408385031215610a58578081fd5b8235610a6381610e93565b91506020830135610a7381610e93565b809150509250929050565b600080600060608486031215610a92578081fd5b8335610a9d81610e93565b92506020840135610aad81610e93565b929592945050506040919091013590565b60008060008060808587031215610ad3578081fd5b8435610ade81610e93565b93506020850135610aee81610e93565b93969395505050506040820135916060013590565b60006020808385031215610b15578182fd5b825167ffffffffffffffff80821115610b2c578384fd5b818501915085601f830112610b3f578384fd5b815181811115610b5157610b51610e64565b83810260405185828201018181108582111715610b7057610b70610e64565b604052828152858101935084860182860187018a1015610b8e578788fd5b8795505b83861015610bb0578051855260019590950194938601938601610b92565b5098975050505050505050565b600060208284031215610bce578081fd5b81518015158114610261578182fd5b600080600060608486031215610bf1578283fd5b610bfa846109eb565b9250610c08602085016109eb565b9150604084015163ffffffff81168114610c20578182fd5b809150509250925092565b600060208284031215610c3c578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f417070726f76616c206661696c65640000000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015610dcf5784516001600160a01b031683529383019391830191600101610daa565b50506001600160a01b03969096166060850152505050608001529392505050565b9283526020830191909152604082015260600190565b60008219821115610e1957610e19610e35565b500190565b600082821015610e3057610e30610e35565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b038116811461037f57600080fdfea264697066735822122034de7fc6a3254453abb3c60f60d00ff90336e5c5cbf37ee1e54e84142fc53e1564736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AMMs/UbeswapWrapper.sol:UbeswapWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2130,
        "contract": "contracts/AMMs/UbeswapWrapper.sol:UbeswapWrapper",
        "label": "supportedPair",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      }
    }
  }
}