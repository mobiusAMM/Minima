{
  "language": "Solidity",
  "sources": {
    "contracts/AMMs/IWrapper.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ninterface IWrapper {\n  // function getQuotes(address tokenIn, uint256 amountIn)\n  //   external\n  //   view\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut);\n\n  function getQuote(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) external view returns (uint256);\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  ) external returns (uint256);\n}\n"
    },
    "contracts/MobiusBaseBurner.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\npragma solidity ^0.8.0;\n\nimport \"./AMMs/IWrapper.sol\";\nimport \"./Minima.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MobiusBaseBurner is Ownable {\n  using SafeERC20 for IERC20;\n\n  IERC20 baseToken;\n  IERC20 constant MOBI = IERC20(0x73a210637f6F6B7005512677Ba6B3C96bb4AA44B);\n  uint256 constant MAX_UINT = 2**256 - 1;\n\n  IWrapper public MobiusWrapper;\n  Minima public MinimaRouter;\n  mapping(address => mapping(address => bool)) isApproved;\n\n  address public emergencyOwner;\n  address public receiver;\n  address public recoveryReceiver;\n  bool public is_killed;\n\n  constructor(\n    address _emergencyOwner,\n    address _receiver,\n    address _recoveryReceiver,\n    IWrapper _mobiusWrapper,\n    Minima _router,\n    IERC20 _baseToken\n  ) Ownable() {\n    emergencyOwner = _emergencyOwner;\n    receiver = _receiver;\n    recoveryReceiver = _recoveryReceiver;\n    MobiusWrapper = _mobiusWrapper;\n    MinimaRouter = _router;\n    baseToken = _baseToken;\n\n    // Set max approval to the Minima Router for baseToken\n    baseToken.safeApprove(address(_router), MAX_UINT);\n  }\n\n  modifier isLive() {\n    require(!is_killed, \"Burner is paused\");\n    _;\n  }\n\n  modifier ownerOrEmergency() {\n    require(\n      msg.sender == owner() || msg.sender == emergencyOwner,\n      \"Only owner\"\n    );\n    _;\n  }\n\n  function burn(IERC20 coin) external isLive returns (bool) {\n    uint256 amount = coin.balanceOf(msg.sender);\n    uint256 amountBase;\n    if (amount > 0) {\n      coin.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    // If the token is not baseToken, then first swap into baseToken through the Mobius pools\n    if (address(coin) != address(baseToken)) {\n      if (!isApproved[address(coin)][address(MobiusWrapper)]) {\n        coin.safeApprove(address(MobiusWrapper), MAX_UINT);\n        isApproved[address(coin)][address(MobiusWrapper)] = true;\n      }\n      MobiusWrapper.swap(address(coin), address(baseToken), amount, 0);\n    }\n\n    MinimaRouter.swapOnChain(\n      address(baseToken),\n      address(MOBI),\n      baseToken.balanceOf(address(this)),\n      0,\n      address(this)\n    );\n\n    MOBI.safeTransfer(receiver, MOBI.balanceOf(address(this)));\n    return true;\n  }\n\n  function setMobiusWrapper(address wrapper) external ownerOrEmergency {\n    MobiusWrapper = IWrapper(wrapper);\n  }\n\n  function setMinima(address minimaAddress) external ownerOrEmergency {\n    MinimaRouter = Minima(minimaAddress);\n    baseToken.approve(minimaAddress, MAX_UINT);\n  }\n\n  function recover_balance(IERC20 coin)\n    external\n    ownerOrEmergency\n    returns (bool)\n  {\n    coin.transfer(recoveryReceiver, coin.balanceOf(address(this)));\n    return true;\n  }\n\n  function setRecovery(address newRecovery) external onlyOwner {\n    recoveryReceiver = newRecovery;\n  }\n\n  function setReciever(address newReciever) external onlyOwner {\n    receiver = newReciever;\n  }\n\n  function setKilled(bool isKilled) external ownerOrEmergency {\n    is_killed = true;\n  }\n\n  function setEmergencyOwner(address newEmergencyOwner)\n    external\n    ownerOrEmergency\n  {\n    emergencyOwner = newEmergencyOwner;\n  }\n}\n"
    },
    "contracts/Minima.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./AMMs/IWrapper.sol\";\nimport \"./OpenMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Minima is Ownable {\n  using OpenMath for *;\n  address[] public dexs;\n  address[] public supportedTokens;\n  mapping(address => bool) public dexKnown;\n  uint256 public numTokens;\n  uint256 public fee = 5 * (10**7);\n  uint256 public FEE_DENOM = 10**10;\n\n  event FeeUpdated(address owner, uint256 oldFee, uint256 newFee);\n  event FeesClaimed(address owner);\n  event TokenAdded(address token);\n  event DexAdded(address dex, string name);\n  event Swap(\n    address tokenFrom,\n    address tokenTo,\n    uint256 amountIn,\n    uint256 amountOut\n  );\n\n  constructor(address[] memory initialTokens, address[] memory initialDexes) {\n    for (uint256 i = 0; i < initialTokens.length; i++) {\n      supportedTokens.push(initialTokens[i]);\n      numTokens++;\n    }\n    for (uint256 i = 0; i < initialDexes.length; i++) {\n      dexKnown[initialDexes[i]] = true;\n      dexs.push(initialDexes[i]);\n    }\n  }\n\n  function addDex(address dexAddress, string calldata name) external onlyOwner {\n    require(!dexKnown[dexAddress], \"DEX has alread been added\");\n    dexKnown[dexAddress] = true;\n    dexs.push(dexAddress);\n    emit DexAdded(dexAddress, name);\n  }\n\n  function addToken(address newToken) external onlyOwner {\n    for (uint256 i = 0; i < supportedTokens.length; i++) {\n      require(supportedTokens[i] != newToken, \"Token already added\");\n    }\n    supportedTokens.push(newToken);\n    numTokens++;\n    emit TokenAdded(newToken);\n  }\n\n  function updateFee(uint256 _fee) external onlyOwner {\n    emit FeeUpdated(owner(), fee, _fee);\n    fee = _fee;\n  }\n\n  function getFees() external onlyOwner {\n    for (uint256 i = 0; i < numTokens; i++) {\n      IERC20 token = IERC20(supportedTokens[i]);\n      token.transfer(owner(), token.balanceOf(address(this)));\n    }\n    emit FeesClaimed(owner());\n  }\n\n  function getBestExchange(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) public view returns (uint256 rate, address exchange) {\n    uint256 amountOut = 0;\n    for (uint256 i = 0; i < dexs.length; i++) {\n      uint256 quote = IWrapper(dexs[i]).getQuote(tokenIn, tokenOut, amountIn);\n      if (quote > amountOut) {\n        amountOut = quote;\n        exchange = dexs[i];\n      }\n    }\n    rate = OpenMath.exchangeRate(amountIn, amountOut);\n  }\n\n  function getTokenIndex(address token) internal view returns (uint256) {\n    for (uint256 i = 0; i < numTokens; i++) {\n      if (address(supportedTokens[i]) == token) {\n        return i;\n      }\n    }\n    revert(\"Token not supported\");\n  }\n\n  function getExpectedOutFromPath(\n    address[] memory tokenPath,\n    address[] memory exchangePath,\n    uint256 amountIn\n  ) public view returns (uint256 expectedOut) {\n    require(tokenPath.length > 1, \"Path must contain atleast two tokens\");\n    require(\n      exchangePath.length == tokenPath.length - 1,\n      \"Exchange path incorrect length\"\n    );\n\n    expectedOut = amountIn;\n    uint256 i = 0;\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\n      expectedOut = IWrapper(exchangePath[i]).getQuote(\n        tokenPath[i],\n        tokenPath[++i],\n        expectedOut\n      );\n    }\n  }\n\n  function getExpectedOut(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  )\n    external\n    view\n    returns (\n      uint256 amountOut,\n      address[] memory tokenPath,\n      address[] memory exchangePath\n    )\n  {\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\n\n    (\n      address[][] memory exchanges,\n      uint256[] memory parents,\n      bool arbExists\n    ) = fillBoard(tokenFromIndex);\n    (\n      address[] memory _tokenPath,\n      address[] memory _exchangePath\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\n    tokenPath = _tokenPath;\n    exchangePath = _exchangePath;\n    amountOut = getExpectedOutFromPath(tokenPath, exchangePath, amountIn);\n  }\n\n  function fillBoard(uint256 tokenFromIndex)\n    public\n    view\n    returns (\n      address[][] memory exchanges,\n      uint256[] memory parents,\n      bool arbExists\n    )\n  {\n    int256[][] memory exchangeRates = new int256[][](numTokens);\n    int256[] memory pathTo = new int256[](numTokens);\n    exchanges = new address[][](numTokens);\n    parents = new uint256[](numTokens);\n\n    for (uint256 i = 0; i < numTokens; i++) {\n      pathTo[i] = OpenMath.MAX_INT;\n      exchangeRates[i] = new int256[](numTokens);\n      exchanges[i] = new address[](numTokens);\n      if (i == tokenFromIndex) {\n        pathTo[i] = 0;\n      }\n      ERC20 tokenIn = ERC20(supportedTokens[i]);\n      uint256 decimals = 10**tokenIn.decimals();\n      for (uint256 j = 0; j < numTokens; j++) {\n        (uint256 rate, address exchange) = getBestExchange(\n          supportedTokens[i],\n          supportedTokens[j],\n          100 * decimals\n        );\n        exchanges[i][j] = exchange;\n        exchangeRates[i][j] = rate == 0\n          ? OpenMath.MAX_INT\n          : -1 * OpenMath.log_2(rate);\n      }\n    }\n\n    uint256 iteration = 0;\n    {\n      bool improved = true;\n      while (iteration < numTokens && improved) {\n        improved = false;\n        iteration++;\n        for (uint256 i = 0; i < numTokens; i++) {\n          int256 curCost = pathTo[i];\n          if (curCost != OpenMath.MAX_INT) {\n            for (uint256 j = 0; j < numTokens; j++) {\n              if (\n                exchangeRates[i][j] < OpenMath.MAX_INT &&\n                curCost + exchangeRates[i][j] < pathTo[j]\n              ) {\n                pathTo[j] = curCost + exchangeRates[i][j];\n                improved = true;\n                parents[j] = i;\n              }\n            }\n          }\n        }\n        if (iteration == numTokens) {\n          arbExists = improved;\n        }\n      }\n    }\n  }\n\n  function getPathFromBoard(\n    uint256 tokenFromIndex,\n    uint256 tokenOutIndex,\n    address[][] memory exchanges,\n    uint256[] memory parents\n  )\n    public\n    view\n    returns (address[] memory tokenPath, address[] memory exchangePath)\n  {\n    address[] memory backPath = new address[](numTokens);\n    address[] memory backExchPath = new address[](numTokens - 1);\n    tokenPath = new address[](numTokens);\n    exchangePath = new address[](numTokens - 1);\n    uint256 curIndex = tokenOutIndex;\n    uint256 iterations = 0;\n\n    while (curIndex != tokenFromIndex) {\n      require(iterations < numTokens, \"No path exists\");\n      uint256 parent = parents[curIndex];\n      backPath[iterations] = supportedTokens[curIndex];\n      backExchPath[iterations++] = exchanges[parent][curIndex];\n      curIndex = parent;\n    }\n\n    tokenPath[0] = supportedTokens[tokenFromIndex];\n    for (uint256 i = 1; i <= iterations; i++) {\n      tokenPath[i] = backPath[iterations - i];\n      exchangePath[i - 1] = backExchPath[iterations - i];\n    }\n  }\n\n  // To do - add check for 0x0 address in exchangePath\n  function swap(\n    address[] memory tokenPath,\n    address[] memory exchangePath,\n    uint256 amountIn,\n    uint256 minAmountOut,\n    address recipient\n  ) public returns (uint256 actualAmountOut) {\n    require(tokenPath.length > 1, \"Path must contain atleast two tokens\");\n    require(\n      exchangePath.length == tokenPath.length - 1,\n      \"Exchange path incorrect length\"\n    );\n    IERC20 inputToken = IERC20(tokenPath[0]);\n    require(\n      inputToken.transferFrom(msg.sender, address(this), amountIn),\n      \"Transfer failed\"\n    );\n    actualAmountOut = amountIn;\n    uint256 i = 0;\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\n      address exchange = exchangePath[i];\n      inputToken = IERC20(tokenPath[i]);\n      IERC20 outToken = IERC20(tokenPath[++i]);\n      uint256 startingBalance = outToken.balanceOf(address(this));\n      require(inputToken.approve(exchange, actualAmountOut), \"Approval failed\");\n\n      IWrapper(exchange).swap(\n        address(inputToken),\n        address(outToken),\n        actualAmountOut,\n        0\n      );\n      actualAmountOut = outToken.balanceOf(address(this)) - startingBalance;\n    }\n    uint256 swapFee = (actualAmountOut * fee) / FEE_DENOM;\n    actualAmountOut -= swapFee;\n\n    require(actualAmountOut >= minAmountOut, \"Slippage was too high\");\n    IERC20(tokenPath[i]).transfer(recipient, actualAmountOut);\n    emit Swap(tokenPath[0], tokenPath[i], amountIn, actualAmountOut);\n  }\n\n  function swapOnChain(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut,\n    address recipient\n  ) external returns (uint256) {\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\n\n    (address[][] memory exchanges, uint256[] memory parents, ) = fillBoard(\n      tokenFromIndex\n    );\n\n    (\n      address[] memory tokenPath,\n      address[] memory exchangePath\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\n    return swap(tokenPath, exchangePath, amountIn, minAmountOut, recipient);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/OpenMath.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nlibrary OpenMath {\n  uint256 constant MAX_UINT = 2**256 - 1;\n  uint256 constant DECIMALS_UINT = 10**18;\n  int256 constant DECIMALS_SIGNED = 10**18;\n  int256 constant MAX_INT = 2**255 - 1;\n  uint256 internal constant HALF_SCALE = 5e17;\n\n  /// @dev How many trailing decimals can be represented.\n  int256 internal constant SCALE = 1e18;\n\n  // 2^127.\n  uint128 private constant TWO127 = 0x80000000000000000000000000000000;\n\n  // 2^128 - 1\n  uint128 private constant TWO128_1 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  // ln(2) * 2^128\n  uint128 private constant LN2 = 0xb17217f7d1cf79abc9e3b39803f2f6af;\n\n  /**\n   * Return index of most significant non-zero bit in given non-zero 256-bit\n   * unsigned integer value.\n   *\n   * @param _x value to get index of most significant non-zero bit in\n   * @return r index of most significant non-zero bit in given number\n   */\n  function mostSignificantBit(uint256 _x) internal pure returns (uint8 r) {\n    require(_x > 0);\n\n    uint256 x = _x;\n    r = 0;\n    if (x >= 0x100000000000000000000000000000000) {\n      x >>= 128;\n      r += 128;\n    }\n    if (x >= 0x10000000000000000) {\n      x >>= 64;\n      r += 64;\n    }\n    if (x >= 0x100000000) {\n      x >>= 32;\n      r += 32;\n    }\n    if (x >= 0x10000) {\n      x >>= 16;\n      r += 16;\n    }\n    if (x >= 0x100) {\n      x >>= 8;\n      r += 8;\n    }\n    if (x >= 0x10) {\n      x >>= 4;\n      r += 4;\n    }\n    if (x >= 0x4) {\n      x >>= 2;\n      r += 2;\n    }\n    if (x >= 0x2) r += 1; // No need to shift x anymore\n  }\n\n  /*\nfunction mostSignificantBit (uint256 x) pure internal returns (uint8) {\n  require (x > 0);\n\n  uint8 l = 0;\n  uint8 h = 255;\n\n  while (h > l) {\n    uint8 m = uint8 ((uint16 (l) + uint16 (h)) >> 1);\n    uint256 t = x >> m;\n    if (t == 0) h = m - 1;\n    else if (t > 1) l = m + 1;\n    else return m;\n  }\n\n  return h;\n}\n*/\n\n  /**\n   * Calculate log_2 (x / 2^128) * 2^128.\n   *\n   * @param _x parameter value\n   * @return log_2 (x / 2^128) * 2^128\n   */\n  function log_2(uint256 _x) internal pure returns (int256) {\n    require(_x > 0, \"Must be a positive number\");\n    uint256 x = _x;\n    uint8 msb = mostSignificantBit(x);\n    if (msb > 128) x >>= msb - 128;\n    else if (msb < 128) x <<= 128 - msb;\n\n    x &= TWO128_1;\n\n    int256 result = (int256(msb) - 128) << 128; // Integer part of log_2\n\n    int256 bit = TWO127;\n    for (uint8 i = 0; i < 128 && x > 0; i++) {\n      x = (x << 1) + ((x * x + TWO127) >> 128);\n      if (x > TWO128_1) {\n        result |= bit;\n        x = (x >> 1) - TWO127;\n      }\n      bit >>= 1;\n    }\n\n    return result;\n  }\n\n  // Returns exchange rate as a 59.18 decimal integer\n  function exchangeRate(uint256 amountIn, uint256 amountOut)\n    public\n    pure\n    returns (uint256 exchange)\n  {\n    exchange = (amountOut * DECIMALS_UINT) / amountIn;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/AMMs/UbeswapWrapper.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./IWrapper.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IUbeswapRouter {\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountsOut(uint256 amountIn, address[] memory path)\n    external\n    view\n    returns (uint256[] memory amounts);\n\n  function pairFor(address tokenA, address tokenB)\n    external\n    view\n    returns (address);\n}\n\ninterface IPair {\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 _reserve0,\n      uint112 _reserve1,\n      uint32 _blockTimestampLast\n    );\n}\n\ncontract UbeswapWrapper is IWrapper, Ownable {\n  IUbeswapRouter public constant ubeswap =\n    IUbeswapRouter(address(0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121));\n  mapping(address => mapping(address => bool)) supportedPair;\n\n  function _getQuote(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) internal view returns (uint256) {\n    if (!supportedPair[tokenIn][tokenOut]) {\n      return 0;\n    }\n    IPair pair = IPair(ubeswap.pairFor(tokenIn, tokenOut));\n    (uint256 reserveIn, uint256 reserveOut, ) = pair.getReserves();\n    if (tokenIn != pair.token0()) {\n      uint256 temp = reserveIn;\n      reserveIn = reserveOut;\n      reserveOut = temp;\n    }\n    return ubeswap.getAmountOut(amountIn, reserveIn, reserveOut);\n  }\n\n  function getQuote(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) external view override returns (uint256) {\n    return _getQuote(tokenIn, tokenOut, amountIn);\n  }\n\n  // function getQuotes(address tokenIn, uint256 amountIn)\n  //   external\n  //   view\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut)\n  // {\n  //   tokensOut = supportedTokens;\n  //   expectedOut = new uint256[](supportedTokens.length);\n\n  //   for (uint256 i = 0; i < supportedTokens.length; i++) {\n  //     address tokenOut = supportedTokens[i];\n  //     if (tokenOut == tokenIn) {\n  //       expectedOut[i] = 0;\n  //     } else {\n  //       expectedOut[i] = _getQuote(tokenIn, tokenOut, amountIn);\n  //     }\n  //   }\n  // }\n\n  function addTokenPair(address token1, address token2) external onlyOwner {\n    supportedPair[token1][token2] = true;\n    supportedPair[token2][token1] = true;\n  }\n\n  function removeTokenPair(address token1, address token2) external onlyOwner {\n    supportedPair[token1][token2] = false;\n    supportedPair[token2][token1] = false;\n  }\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  ) external override returns (uint256) {\n    address[] memory path = new address[](2);\n    path[0] = tokenIn;\n    path[1] = tokenOut;\n    uint256 time = block.timestamp;\n    IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\n    require(\n      IERC20(tokenIn).approve(address(ubeswap), amountIn),\n      \"Approval failed\"\n    );\n    uint256[] memory amounts = ubeswap.swapExactTokensForTokens(\n      amountIn,\n      minAmountOut,\n      path,\n      msg.sender,\n      time + 30\n    );\n    return amounts[amounts.length - 1];\n  }\n}\n"
    },
    "contracts/AMMs/MoolaWrapper.sol": {
      "content": "// SPDX-License-Identifier: ISC\npragma solidity ^0.8.0;\n\nimport \"./IWrapper.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILendingPool {\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external;\n}\n\ncontract MoolaWrapper is IWrapper, Ownable {\n  ILendingPool lendingPool =\n    ILendingPool(0x970b12522CA9b4054807a2c5B736149a5BE6f670);\n  mapping(address => address) pairs; // underlying  => receiptToken\n\n  function addAsset(address underlying, address receiptToken)\n    external\n    onlyOwner\n  {\n    require(pairs[underlying] == address(0), \"Asset pair already listed\");\n    pairs[underlying] = receiptToken;\n  }\n\n  function _underlying(address tokenIn, address tokenOut)\n    internal\n    view\n    returns (\n      address underlying,\n      address receipt,\n      bool isDeposit\n    )\n  {\n    underlying = tokenIn;\n    receipt = tokenOut;\n    isDeposit = true;\n    if (pairs[tokenOut] == tokenIn) {\n      underlying = tokenOut;\n      receipt = tokenIn;\n      isDeposit = false;\n    }\n  }\n\n  function getQuote(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) external view override returns (uint256) {\n    if (pairs[tokenIn] == tokenOut || pairs[tokenOut] == tokenIn) {\n      return amountIn; // The asset pair exists, so in one atomic action can be swapped 1:1\n    }\n    return 0;\n  }\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  ) external override returns (uint256) {\n    (address underlying, address receipt, bool isDeposit) = _underlying(\n      tokenIn,\n      tokenOut\n    );\n    require(pairs[underlying] == receipt, \"Pair does not exist\");\n\n    IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\n    require(\n      IERC20(tokenIn).approve(address(lendingPool), amountIn),\n      \"Approval failed\"\n    );\n    uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\n\n    if (isDeposit) {\n      lendingPool.deposit(tokenIn, amountIn, address(this), 0);\n    }\n    uint256 actualAmountOut = IERC20(tokenOut).balanceOf(address(this)) -\n      balanceBefore;\n\n    IERC20(tokenOut).transfer(msg.sender, actualAmountOut);\n    return actualAmountOut;\n  }\n}\n"
    },
    "contracts/AMMs/MobiusWrapper.sol": {
      "content": "// SPDX-License-Identifier: ISC\n\n//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./IWrapper.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISwap {\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n  function getToken(uint8 index) external view returns (address);\n\n  function calculateSwap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy,\n    uint256 deadline\n  ) external returns (uint256);\n}\n\ncontract MobiusWrapper is IWrapper, Ownable {\n  mapping(address => mapping(address => address)) public tokenRoute; // token in => token out => swap address\n  mapping(address => bool) public swapContained;\n\n  function addSwapContract(address swapAddress, uint256 numTokens)\n    public\n    onlyOwner\n    returns (bool)\n  {\n    if (swapContained[swapAddress]) return false;\n\n    swapContained[swapAddress] = true;\n\n    ISwap swap = ISwap(swapAddress);\n    address[] memory tokens = new address[](numTokens);\n    for (uint256 i = 0; i < numTokens; i++) {\n      tokens[i] = swap.getToken(uint8(i));\n    }\n\n    // This is technically quadratic, but the number of tokens for a swap contract will *hopefully*\n    // be around 2 or 3\n    for (uint256 i = 0; i < numTokens; i++) {\n      address token_i = tokens[i];\n      for (uint256 j = 0; j < numTokens; j++) {\n        if (j != i) {\n          address token_j = tokens[j];\n          tokenRoute[token_i][token_j] = swapAddress;\n        }\n      }\n    }\n    return true;\n  }\n\n  function addMultipleSwapContracts(\n    address[] calldata contracts,\n    uint256[] calldata numTokens\n  ) external onlyOwner {\n    require(contracts.length == numTokens.length, \"Array lengths vary\");\n    for (uint256 i = 0; i < contracts.length; i++) {\n      addSwapContract(contracts[i], numTokens[i]);\n    }\n  }\n\n  function getTradeIndices(address tokenFrom, address tokenTo)\n    public\n    view\n    returns (\n      uint256 tokenIndexFrom,\n      uint256 tokenIndexTo,\n      address swapAddress\n    )\n  {\n    swapAddress = tokenRoute[tokenFrom][tokenTo];\n    tokenIndexFrom = 0;\n    tokenIndexTo = 0;\n    if (swapAddress != address(0)) {\n      ISwap swap = ISwap(swapAddress);\n      tokenIndexFrom = swap.getTokenIndex(tokenFrom);\n      tokenIndexTo = swap.getTokenIndex(tokenTo);\n    }\n  }\n\n  function _getQuote(\n    uint256 tokenIndexFrom,\n    uint256 tokenIndexTo,\n    uint256 amountIn,\n    address swapAddress\n  ) internal view returns (uint256) {\n    ISwap swap = ISwap(swapAddress);\n    return\n      swap.calculateSwap(uint8(tokenIndexFrom), uint8(tokenIndexTo), amountIn);\n  }\n\n  function getQuote(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn\n  ) external view override returns (uint256) {\n    (\n      uint256 tokenIndexFrom,\n      uint256 tokenIndexTo,\n      address swapAddress\n    ) = getTradeIndices(tokenIn, tokenOut);\n    if (swapAddress == address(0)) {\n      return 0; // Or => OpenMath.MAX_UINT;\n    }\n    return _getQuote(tokenIndexFrom, tokenIndexTo, amountIn, swapAddress);\n  }\n\n  function swap(\n    address tokenIn,\n    address tokenOut,\n    uint256 amountIn,\n    uint256 minAmountOut\n  ) external override returns (uint256) {\n    (\n      uint256 tokenIndexFrom,\n      uint256 tokenIndexTo,\n      address swapAddress\n    ) = getTradeIndices(tokenIn, tokenOut);\n    require(swapAddress != address(0), \"Swap contract does not exist\");\n    ISwap swap = ISwap(swapAddress);\n    uint256 time = block.timestamp;\n\n    IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\n    require(IERC20(tokenIn).approve(swapAddress, amountIn), \"Approval failed\");\n\n    uint256 actualAmountOut = swap.swap(\n      uint8(tokenIndexFrom),\n      uint8(tokenIndexTo),\n      amountIn,\n      minAmountOut,\n      time + 30\n    );\n    IERC20(tokenOut).transfer(msg.sender, actualAmountOut);\n    return actualAmountOut;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 5000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}