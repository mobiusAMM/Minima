{
  "address": "0x1cD9fd825Df14E6A03DE9259427ae106353e9995",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emergencyOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recoveryReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IWrapper",
          "name": "_mobiusWrapper",
          "type": "address"
        },
        {
          "internalType": "contract Minima",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_baseToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MinimaRouter",
      "outputs": [
        {
          "internalType": "contract Minima",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MobiusWrapper",
      "outputs": [
        {
          "internalType": "contract IWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is_killed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "recover_balance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoveryReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newEmergencyOwner",
          "type": "address"
        }
      ],
      "name": "setEmergencyOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isKilled",
          "type": "bool"
        }
      ],
      "name": "setKilled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minimaAddress",
          "type": "address"
        }
      ],
      "name": "setMinima",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "setMobiusWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReciever",
          "type": "address"
        }
      ],
      "name": "setReciever",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRecovery",
          "type": "address"
        }
      ],
      "name": "setRecovery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a05202032e2e30e9ac0288fcd23dc547a485c91d45d2027f4e323c3fb531b41",
  "receipt": {
    "to": null,
    "from": "0xCD943EE26221AC3e6e7f3e38598F2b08BAEA87DD",
    "contractAddress": "0x1cD9fd825Df14E6A03DE9259427ae106353e9995",
    "transactionIndex": 8,
    "gasUsed": "1435353",
    "logsBloom": "0x
    "blockHash": "0xb9a9739a9c212aa503d08413d85678419dfcb88d39da90c2e1dbcf069e6bdfc6",
    "transactionHash": "0x1a05202032e2e30e9ac0288fcd23dc547a485c91d45d2027f4e323c3fb531b41",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 11045651,
        "transactionHash": "0x1a05202032e2e30e9ac0288fcd23dc547a485c91d45d2027f4e323c3fb531b41",
        "address": "0x1cD9fd825Df14E6A03DE9259427ae106353e9995",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd943ee26221ac3e6e7f3e38598f2b08baea87dd"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0xb9a9739a9c212aa503d08413d85678419dfcb88d39da90c2e1dbcf069e6bdfc6"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 11045651,
        "transactionHash": "0x1a05202032e2e30e9ac0288fcd23dc547a485c91d45d2027f4e323c3fb531b41",
        "address": "0x765DE816845861e75A25fCA122bb6898B8B1282a",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001cd9fd825df14e6a03de9259427ae106353e9995",
          "0x00000000000000000000000009f63db4f7c16c7357c6319e5ffb443a633cb0da"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 45,
        "blockHash": "0xb9a9739a9c212aa503d08413d85678419dfcb88d39da90c2e1dbcf069e6bdfc6"
      }
    ],
    "blockNumber": 11045651,
    "cumulativeGasUsed": "3006682",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCD943EE26221AC3e6e7f3e38598F2b08BAEA87DD",
    "0xCD943EE26221AC3e6e7f3e38598F2b08BAEA87DD",
    "0xCD943EE26221AC3e6e7f3e38598F2b08BAEA87DD",
    "0xa5De00C3fA855691A577fF10BC1eC7bDD4182465",
    "0x09F63DB4f7C16C7357C6319e5ffb443a633cb0DA",
    "0x765DE816845861e75A25fCA122bb6898B8B1282a"
  ],
  "solcInputHash": "3a7145ea8434819e6e4b37375a4fe8d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recoveryReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IWrapper\",\"name\":\"_mobiusWrapper\",\"type\":\"address\"},{\"internalType\":\"contract Minima\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MinimaRouter\",\"outputs\":[{\"internalType\":\"contract Minima\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MobiusWrapper\",\"outputs\":[{\"internalType\":\"contract IWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_killed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"recover_balance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEmergencyOwner\",\"type\":\"address\"}],\"name\":\"setEmergencyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isKilled\",\"type\":\"bool\"}],\"name\":\"setKilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minimaAddress\",\"type\":\"address\"}],\"name\":\"setMinima\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"setMobiusWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReciever\",\"type\":\"address\"}],\"name\":\"setReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecovery\",\"type\":\"address\"}],\"name\":\"setRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MobiusBaseBurner.sol\":\"MobiusBaseBurner\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/AMMs/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IWrapper {\\n  // function getQuotes(address tokenIn, uint256 amountIn)\\n  //   external\\n  //   view\\n  //   returns (uint256[] memory expectedOut, address[] memory tokensOut);\\n\\n  function getQuote(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function swap(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe28ad8a2e64da6b69dd248a3eeff8544af45bf910ad0d3d0a1e53318a9389e17\",\"license\":\"ISC\"},\"contracts/Minima.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AMMs/IWrapper.sol\\\";\\nimport \\\"./OpenMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Minima is Ownable {\\n  using OpenMath for *;\\n  address[] public dexs;\\n  address[] public supportedTokens;\\n  mapping(address => bool) public dexKnown;\\n  uint256 public numTokens;\\n  uint256 public fee = 5 * (10**7);\\n  uint256 public FEE_DENOM = 10**10;\\n\\n  event FeeUpdated(address owner, uint256 oldFee, uint256 newFee);\\n  event FeesClaimed(address owner);\\n  event TokenAdded(address token);\\n  event DexAdded(address dex, string name);\\n  event Swap(\\n    address tokenFrom,\\n    address tokenTo,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  constructor(address[] memory initialTokens, address[] memory initialDexes) {\\n    for (uint256 i = 0; i < initialTokens.length; i++) {\\n      supportedTokens.push(initialTokens[i]);\\n      numTokens++;\\n    }\\n    for (uint256 i = 0; i < initialDexes.length; i++) {\\n      dexKnown[initialDexes[i]] = true;\\n      dexs.push(initialDexes[i]);\\n    }\\n  }\\n\\n  function addDex(address dexAddress, string calldata name) external onlyOwner {\\n    require(!dexKnown[dexAddress], \\\"DEX has alread been added\\\");\\n    dexKnown[dexAddress] = true;\\n    dexs.push(dexAddress);\\n    emit DexAdded(dexAddress, name);\\n  }\\n\\n  function addToken(address newToken) external onlyOwner {\\n    for (uint256 i = 0; i < supportedTokens.length; i++) {\\n      require(supportedTokens[i] != newToken, \\\"Token already added\\\");\\n    }\\n    supportedTokens.push(newToken);\\n    numTokens++;\\n    emit TokenAdded(newToken);\\n  }\\n\\n  function updateFee(uint256 _fee) external onlyOwner {\\n    emit FeeUpdated(owner(), fee, _fee);\\n    fee = _fee;\\n  }\\n\\n  function getFees() external onlyOwner {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      IERC20 token = IERC20(supportedTokens[i]);\\n      token.transfer(owner(), token.balanceOf(address(this)));\\n    }\\n    emit FeesClaimed(owner());\\n  }\\n\\n  function getBestExchange(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) public view returns (uint256 rate, address exchange) {\\n    uint256 amountOut = 0;\\n    for (uint256 i = 0; i < dexs.length; i++) {\\n      uint256 quote = IWrapper(dexs[i]).getQuote(tokenIn, tokenOut, amountIn);\\n      if (quote > amountOut) {\\n        amountOut = quote;\\n        exchange = dexs[i];\\n      }\\n    }\\n    rate = OpenMath.exchangeRate(amountIn, amountOut);\\n  }\\n\\n  function getTokenIndex(address token) internal view returns (uint256) {\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      if (address(supportedTokens[i]) == token) {\\n        return i;\\n      }\\n    }\\n    revert(\\\"Token not supported\\\");\\n  }\\n\\n  function getExpectedOutFromPath(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn\\n  ) public view returns (uint256 expectedOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n\\n    expectedOut = amountIn;\\n    uint256 i = 0;\\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\\n      expectedOut = IWrapper(exchangePath[i]).getQuote(\\n        tokenPath[i],\\n        tokenPath[++i],\\n        expectedOut\\n      );\\n    }\\n  }\\n\\n  function getExpectedOut(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 amountOut,\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    )\\n  {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (\\n      address[][] memory exchanges,\\n      uint256[] memory parents,\\n      bool arbExists\\n    ) = fillBoard(tokenFromIndex);\\n    (\\n      address[] memory _tokenPath,\\n      address[] memory _exchangePath\\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\\n    tokenPath = _tokenPath;\\n    exchangePath = _exchangePath;\\n    amountOut = getExpectedOutFromPath(tokenPath, exchangePath, amountIn);\\n  }\\n\\n  function fillBoard(uint256 tokenFromIndex)\\n    public\\n    view\\n    returns (\\n      address[][] memory exchanges,\\n      uint256[] memory parents,\\n      bool arbExists\\n    )\\n  {\\n    int256[][] memory exchangeRates = new int256[][](numTokens);\\n    int256[] memory pathTo = new int256[](numTokens);\\n    exchanges = new address[][](numTokens);\\n    parents = new uint256[](numTokens);\\n\\n    for (uint256 i = 0; i < numTokens; i++) {\\n      pathTo[i] = OpenMath.MAX_INT;\\n      exchangeRates[i] = new int256[](numTokens);\\n      exchanges[i] = new address[](numTokens);\\n      if (i == tokenFromIndex) {\\n        pathTo[i] = 0;\\n      }\\n      ERC20 tokenIn = ERC20(supportedTokens[i]);\\n      uint256 decimals = 10**tokenIn.decimals();\\n      for (uint256 j = 0; j < numTokens; j++) {\\n        (uint256 rate, address exchange) = getBestExchange(\\n          supportedTokens[i],\\n          supportedTokens[j],\\n          100 * decimals\\n        );\\n        exchanges[i][j] = exchange;\\n        exchangeRates[i][j] = rate == 0\\n          ? OpenMath.MAX_INT\\n          : -1 * OpenMath.log_2(rate);\\n      }\\n    }\\n\\n    uint256 iteration = 0;\\n    {\\n      bool improved = true;\\n      while (iteration < numTokens && improved) {\\n        improved = false;\\n        iteration++;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n          int256 curCost = pathTo[i];\\n          if (curCost != OpenMath.MAX_INT) {\\n            for (uint256 j = 0; j < numTokens; j++) {\\n              if (\\n                exchangeRates[i][j] < OpenMath.MAX_INT &&\\n                curCost + exchangeRates[i][j] < pathTo[j]\\n              ) {\\n                pathTo[j] = curCost + exchangeRates[i][j];\\n                improved = true;\\n                parents[j] = i;\\n              }\\n            }\\n          }\\n        }\\n        if (iteration == numTokens) {\\n          arbExists = improved;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getPathFromBoard(\\n    uint256 tokenFromIndex,\\n    uint256 tokenOutIndex,\\n    address[][] memory exchanges,\\n    uint256[] memory parents\\n  )\\n    public\\n    view\\n    returns (address[] memory tokenPath, address[] memory exchangePath)\\n  {\\n    address[] memory backPath = new address[](numTokens);\\n    address[] memory backExchPath = new address[](numTokens - 1);\\n    tokenPath = new address[](numTokens);\\n    exchangePath = new address[](numTokens - 1);\\n    uint256 curIndex = tokenOutIndex;\\n    uint256 iterations = 0;\\n\\n    while (curIndex != tokenFromIndex) {\\n      require(iterations < numTokens, \\\"No path exists\\\");\\n      uint256 parent = parents[curIndex];\\n      backPath[iterations] = supportedTokens[curIndex];\\n      backExchPath[iterations++] = exchanges[parent][curIndex];\\n      curIndex = parent;\\n    }\\n\\n    tokenPath[0] = supportedTokens[tokenFromIndex];\\n    for (uint256 i = 1; i <= iterations; i++) {\\n      tokenPath[i] = backPath[iterations - i];\\n      exchangePath[i - 1] = backExchPath[iterations - i];\\n    }\\n  }\\n\\n  // To do - add check for 0x0 address in exchangePath\\n  function swap(\\n    address[] memory tokenPath,\\n    address[] memory exchangePath,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) public returns (uint256 actualAmountOut) {\\n    require(tokenPath.length > 1, \\\"Path must contain atleast two tokens\\\");\\n    require(\\n      exchangePath.length == tokenPath.length - 1,\\n      \\\"Exchange path incorrect length\\\"\\n    );\\n    IERC20 inputToken = IERC20(tokenPath[0]);\\n    require(\\n      inputToken.transferFrom(msg.sender, address(this), amountIn),\\n      \\\"Transfer failed\\\"\\n    );\\n    actualAmountOut = amountIn;\\n    uint256 i = 0;\\n    while (i < exchangePath.length && exchangePath[i] != address(0)) {\\n      address exchange = exchangePath[i];\\n      inputToken = IERC20(tokenPath[i]);\\n      IERC20 outToken = IERC20(tokenPath[++i]);\\n      uint256 startingBalance = outToken.balanceOf(address(this));\\n      require(inputToken.approve(exchange, actualAmountOut), \\\"Approval failed\\\");\\n\\n      IWrapper(exchange).swap(\\n        address(inputToken),\\n        address(outToken),\\n        actualAmountOut,\\n        0\\n      );\\n      actualAmountOut = outToken.balanceOf(address(this)) - startingBalance;\\n    }\\n    uint256 swapFee = (actualAmountOut * fee) / FEE_DENOM;\\n    actualAmountOut -= swapFee;\\n\\n    require(actualAmountOut >= minAmountOut, \\\"Slippage was too high\\\");\\n    IERC20(tokenPath[i]).transfer(recipient, actualAmountOut);\\n    emit Swap(tokenPath[0], tokenPath[i], amountIn, actualAmountOut);\\n  }\\n\\n  function swapOnChain(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn,\\n    uint256 minAmountOut,\\n    address recipient\\n  ) external returns (uint256) {\\n    uint256 tokenFromIndex = getTokenIndex(tokenIn);\\n    uint256 tokenOutIndex = getTokenIndex(tokenOut);\\n\\n    (address[][] memory exchanges, uint256[] memory parents, ) = fillBoard(\\n      tokenFromIndex\\n    );\\n\\n    (\\n      address[] memory tokenPath,\\n      address[] memory exchangePath\\n    ) = getPathFromBoard(tokenFromIndex, tokenOutIndex, exchanges, parents);\\n    return swap(tokenPath, exchangePath, amountIn, minAmountOut, recipient);\\n  }\\n}\\n\",\"keccak256\":\"0xd127350aaeabf0100e2a1ee752c169213090bf93ea998d1c3b73ac354f1d18cc\",\"license\":\"ISC\"},\"contracts/MobiusBaseBurner.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AMMs/IWrapper.sol\\\";\\nimport \\\"./Minima.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract MobiusBaseBurner is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 baseToken;\\n  IERC20 constant MOBI = IERC20(0x73a210637f6F6B7005512677Ba6B3C96bb4AA44B);\\n  uint256 constant MAX_UINT = 2**256 - 1;\\n\\n  IWrapper public MobiusWrapper;\\n  Minima public MinimaRouter;\\n  mapping(address => mapping(address => bool)) isApproved;\\n\\n  address public emergencyOwner;\\n  address public receiver;\\n  address public recoveryReceiver;\\n  bool public is_killed;\\n\\n  constructor(\\n    address _emergencyOwner,\\n    address _receiver,\\n    address _recoveryReceiver,\\n    IWrapper _mobiusWrapper,\\n    Minima _router,\\n    IERC20 _baseToken\\n  ) Ownable() {\\n    emergencyOwner = _emergencyOwner;\\n    receiver = _receiver;\\n    recoveryReceiver = _recoveryReceiver;\\n    MobiusWrapper = _mobiusWrapper;\\n    MinimaRouter = _router;\\n    baseToken = _baseToken;\\n\\n    // Set max approval to the Minima Router for baseToken\\n    baseToken.safeApprove(address(_router), MAX_UINT);\\n  }\\n\\n  modifier isLive() {\\n    require(!is_killed, \\\"Burner is paused\\\");\\n    _;\\n  }\\n\\n  modifier ownerOrEmergency() {\\n    require(\\n      msg.sender == owner() || msg.sender == emergencyOwner,\\n      \\\"Only owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function burn(IERC20 coin) external isLive returns (bool) {\\n    uint256 amount = coin.balanceOf(msg.sender);\\n    uint256 amountBase;\\n    if (amount == 0) return false;\\n\\n    coin.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    // If the token is not baseToken, then first swap into baseToken through the Mobius pools\\n    if (address(coin) != address(baseToken)) {\\n      if (!isApproved[address(coin)][address(MobiusWrapper)]) {\\n        coin.safeApprove(address(MobiusWrapper), MAX_UINT);\\n        isApproved[address(coin)][address(MobiusWrapper)] = true;\\n      }\\n      MobiusWrapper.swap(address(coin), address(baseToken), amount, 0);\\n    }\\n\\n    MinimaRouter.swapOnChain(\\n      address(baseToken),\\n      address(MOBI),\\n      baseToken.balanceOf(address(this)),\\n      0,\\n      address(this)\\n    );\\n\\n    MOBI.safeTransfer(receiver, MOBI.balanceOf(address(this)));\\n    return true;\\n  }\\n\\n  function setMobiusWrapper(address wrapper) external ownerOrEmergency {\\n    MobiusWrapper = IWrapper(wrapper);\\n  }\\n\\n  function setMinima(address minimaAddress) external ownerOrEmergency {\\n    MinimaRouter = Minima(minimaAddress);\\n    baseToken.approve(minimaAddress, MAX_UINT);\\n  }\\n\\n  function recover_balance(IERC20 coin)\\n    external\\n    ownerOrEmergency\\n    returns (bool)\\n  {\\n    coin.transfer(recoveryReceiver, coin.balanceOf(address(this)));\\n    return true;\\n  }\\n\\n  function setRecovery(address newRecovery) external onlyOwner {\\n    recoveryReceiver = newRecovery;\\n  }\\n\\n  function setReciever(address newReciever) external onlyOwner {\\n    receiver = newReciever;\\n  }\\n\\n  function setKilled(bool isKilled) external ownerOrEmergency {\\n    is_killed = true;\\n  }\\n\\n  function setEmergencyOwner(address newEmergencyOwner)\\n    external\\n    ownerOrEmergency\\n  {\\n    emergencyOwner = newEmergencyOwner;\\n  }\\n}\\n\",\"keccak256\":\"0xc5ec06f368c16d0934a6314b999d84ab78ca57347363fc1a4c9ed204eb889f58\",\"license\":\"ISC\"},\"contracts/OpenMath.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\n//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary OpenMath {\\n  uint256 constant MAX_UINT = 2**256 - 1;\\n  uint256 constant DECIMALS_UINT = 10**18;\\n  int256 constant DECIMALS_SIGNED = 10**18;\\n  int256 constant MAX_INT = 2**255 - 1;\\n  uint256 internal constant HALF_SCALE = 5e17;\\n\\n  /// @dev How many trailing decimals can be represented.\\n  int256 internal constant SCALE = 1e18;\\n\\n  // 2^127.\\n  uint128 private constant TWO127 = 0x80000000000000000000000000000000;\\n\\n  // 2^128 - 1\\n  uint128 private constant TWO128_1 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  // ln(2) * 2^128\\n  uint128 private constant LN2 = 0xb17217f7d1cf79abc9e3b39803f2f6af;\\n\\n  /**\\n   * Return index of most significant non-zero bit in given non-zero 256-bit\\n   * unsigned integer value.\\n   *\\n   * @param _x value to get index of most significant non-zero bit in\\n   * @return r index of most significant non-zero bit in given number\\n   */\\n  function mostSignificantBit(uint256 _x) internal pure returns (uint8 r) {\\n    require(_x > 0);\\n\\n    uint256 x = _x;\\n    r = 0;\\n    if (x >= 0x100000000000000000000000000000000) {\\n      x >>= 128;\\n      r += 128;\\n    }\\n    if (x >= 0x10000000000000000) {\\n      x >>= 64;\\n      r += 64;\\n    }\\n    if (x >= 0x100000000) {\\n      x >>= 32;\\n      r += 32;\\n    }\\n    if (x >= 0x10000) {\\n      x >>= 16;\\n      r += 16;\\n    }\\n    if (x >= 0x100) {\\n      x >>= 8;\\n      r += 8;\\n    }\\n    if (x >= 0x10) {\\n      x >>= 4;\\n      r += 4;\\n    }\\n    if (x >= 0x4) {\\n      x >>= 2;\\n      r += 2;\\n    }\\n    if (x >= 0x2) r += 1; // No need to shift x anymore\\n  }\\n\\n  /*\\nfunction mostSignificantBit (uint256 x) pure internal returns (uint8) {\\n  require (x > 0);\\n\\n  uint8 l = 0;\\n  uint8 h = 255;\\n\\n  while (h > l) {\\n    uint8 m = uint8 ((uint16 (l) + uint16 (h)) >> 1);\\n    uint256 t = x >> m;\\n    if (t == 0) h = m - 1;\\n    else if (t > 1) l = m + 1;\\n    else return m;\\n  }\\n\\n  return h;\\n}\\n*/\\n\\n  /**\\n   * Calculate log_2 (x / 2^128) * 2^128.\\n   *\\n   * @param _x parameter value\\n   * @return log_2 (x / 2^128) * 2^128\\n   */\\n  function log_2(uint256 _x) internal pure returns (int256) {\\n    require(_x > 0, \\\"Must be a positive number\\\");\\n    uint256 x = _x;\\n    uint8 msb = mostSignificantBit(x);\\n    if (msb > 128) x >>= msb - 128;\\n    else if (msb < 128) x <<= 128 - msb;\\n\\n    x &= TWO128_1;\\n\\n    int256 result = (int256(msb) - 128) << 128; // Integer part of log_2\\n\\n    int256 bit = TWO127;\\n    for (uint8 i = 0; i < 128 && x > 0; i++) {\\n      x = (x << 1) + ((x * x + TWO127) >> 128);\\n      if (x > TWO128_1) {\\n        result |= bit;\\n        x = (x >> 1) - TWO127;\\n      }\\n      bit >>= 1;\\n    }\\n\\n    return result;\\n  }\\n\\n  // Returns exchange rate as a 59.18 decimal integer\\n  function exchangeRate(uint256 amountIn, uint256 amountOut)\\n    public\\n    pure\\n    returns (uint256 exchange)\\n  {\\n    exchange = (amountOut * DECIMALS_UINT) / amountIn;\\n  }\\n}\\n\",\"keccak256\":\"0x2418b2fe22a4e35863813975d73f232a30acb962f47615df58e3405f49979ae9\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c3c38038062001c3c833981016040819052620000349162000406565b6200004862000042620000d1565b620000d5565b600580546001600160a01b03199081166001600160a01b0389811691909117909255600680548216888416179055600780548216878416179055600280548216868416179055600380548216858416179055600180549091168383161790819055620000c591168360001962000125602090811b62000d2b17901c565b505050505050620006ca565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b801580620001b45750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906200015e9030908690600401620004f2565b60206040518083038186803b1580156200017757600080fd5b505afa1580156200018c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b29190620004bb565b155b620001dc5760405162461bcd60e51b8152600401620001d39062000621565b60405180910390fd5b620002378363095ea7b360e01b8484604051602401620001fe9291906200050c565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200023c16565b505050565b600062000298826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316620002d860201b62000e8e179092919060201c565b805190915015620002375780806020019051810190620002b9919062000499565b620002375760405162461bcd60e51b8152600401620001d390620005d7565b6060620002e98484600085620002f3565b90505b9392505050565b606082471015620003185760405162461bcd60e51b8152600401620001d3906200055a565b6200032385620003c2565b620003425760405162461bcd60e51b8152600401620001d390620005a0565b600080866001600160a01b03168587604051620003609190620004d4565b60006040518083038185875af1925050503d80600081146200039f576040519150601f19603f3d011682016040523d82523d6000602084013e620003a4565b606091505b509092509050620003b7828286620003c8565b979650505050505050565b3b151590565b60608315620003d9575081620002ec565b825115620003ea5782518084602001fd5b8160405162461bcd60e51b8152600401620001d3919062000525565b60008060008060008060c087890312156200041f578182fd5b86516200042c81620006b1565b60208801519096506200043f81620006b1565b60408801519095506200045281620006b1565b60608801519094506200046581620006b1565b60808801519093506200047881620006b1565b60a08801519092506200048b81620006b1565b809150509295509295509295565b600060208284031215620004ab578081fd5b81518015158114620002ec578182fd5b600060208284031215620004cd578081fd5b5051919050565b60008251620004e88184602087016200067e565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152620005468160408501602087016200067e565b601f01601f19169190910160400192915050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156200069b57818101518382015260200162000681565b83811115620006ab576000848401525b50505050565b6001600160a01b0381168114620006c757600080fd5b50565b61156280620006da6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063d95315b7116100b2578063f0d85c8911610081578063f2fde38b11610066578063f2fde38b14610202578063f7260d3e14610215578063fc202cfd1461021d5761011b565b8063f0d85c89146101e7578063f170c85c146101fa5761011b565b8063d95315b7146101b1578063db2f5f79146101b9578063dcabf86b146101cc578063ec88ed4a146101df5761011b565b80639c868ac0116100ee5780639c868ac01461017b578063a0db86f914610183578063a3029aca14610196578063ae8747a0146101a95761011b565b80630959950414610120578063715018a61461013557806389afcb441461013d5780638da5cb5b14610166575b600080fd5b61013361012e366004611103565b610230565b005b6101336102c8565b61015061014b3660046110e7565b610313565b60405161015d9190611233565b60405180910390f35b61016e610797565b60405161015d919061116f565b6101506107a6565b6101336101913660046110e7565b6107c7565b6101336101a43660046110e7565b610840565b61016e61097d565b61016e61098c565b6101506101c73660046110e7565b61099b565b6101336101da3660046110e7565b610b06565b61016e610b8d565b6101336101f53660046110e7565b610b9c565b61016e610c15565b6101336102103660046110e7565b610c24565b61016e610c95565b61013361022b3660046110e7565b610ca4565b610238610797565b6001600160a01b0316336001600160a01b0316148061026157506005546001600160a01b031633145b6102865760405162461bcd60e51b815260040161027d9061128f565b60405180910390fd5b50600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6102d0610ea7565b6001600160a01b03166102e1610797565b6001600160a01b0316146103075760405162461bcd60e51b815260040161027d906113b7565b6103116000610eab565b565b60075460009074010000000000000000000000000000000000000000900460ff16156103515760405162461bcd60e51b815260040161027d90611380565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a082319061039990339060040161116f565b60206040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e9919061113b565b90506000816103fd57600092505050610792565b6104126001600160a01b038516333085610f13565b6001546001600160a01b0385811691161461058c576001600160a01b0380851660009081526004602090815260408083206002549094168352929052205460ff166104e357600254610491906001600160a01b0386811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d2b565b6001600160a01b03808516600090815260046020908152604080832060025490941683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6002546001546040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263fe029156926105389289929091169087906000906004016111c1565b602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a919061113b565b505b6003546001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0392831692635ed8bda59216907373a210637f6f6b7005512677ba6b3c96bb4aa44b9082906370a08231906105f890309060040161116f565b60206040518083038186803b15801561061057600080fd5b505afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610648919061113b565b6000306040518663ffffffff1660e01b815260040161066b9594939291906111ea565b602060405180830381600087803b15801561068557600080fd5b505af1158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd919061113b565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815261078b916001600160a01b0316907373a210637f6f6b7005512677ba6b3c96bb4aa44b906370a082319061071f90309060040161116f565b60206040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f919061113b565b7373a210637f6f6b7005512677ba6b3c96bb4aa44b9190610f3a565b6001925050505b919050565b6000546001600160a01b031690565b60075474010000000000000000000000000000000000000000900460ff1681565b6107cf610ea7565b6001600160a01b03166107e0610797565b6001600160a01b0316146108065760405162461bcd60e51b815260040161027d906113b7565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610848610797565b6001600160a01b0316336001600160a01b0316148061087157506005546001600160a01b031633145b61088d5760405162461bcd60e51b815260040161027d9061128f565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03838116919091179091556001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815291169063095ea7b3906109279084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161121a565b602060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610979919061111f565b5050565b6003546001600160a01b031681565b6007546001600160a01b031681565b60006109a5610797565b6001600160a01b0316336001600160a01b031614806109ce57506005546001600160a01b031633145b6109ea5760405162461bcd60e51b815260040161027d9061128f565b6007546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038085169263a9059cbb9291169083906370a0823190610a3e90309060040161116f565b60206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061113b565b6040518363ffffffff1660e01b8152600401610aab92919061121a565b602060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd919061111f565b50600192915050565b610b0e610797565b6001600160a01b0316336001600160a01b03161480610b3757506005546001600160a01b031633145b610b535760405162461bcd60e51b815260040161027d9061128f565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b610ba4610ea7565b6001600160a01b0316610bb5610797565b6001600160a01b031614610bdb5760405162461bcd60e51b815260040161027d906113b7565b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b610c2c610ea7565b6001600160a01b0316610c3d610797565b6001600160a01b031614610c635760405162461bcd60e51b815260040161027d906113b7565b6001600160a01b038116610c895760405162461bcd60e51b815260040161027d906112c6565b610c9281610eab565b50565b6006546001600160a01b031681565b610cac610797565b6001600160a01b0316336001600160a01b03161480610cd557506005546001600160a01b031633145b610cf15760405162461bcd60e51b815260040161027d9061128f565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b801580610dcc57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610d7a9030908690600401611183565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061113b565b155b610de85760405162461bcd60e51b815260040161027d90611480565b610e898363095ea7b360e01b8484604051602401610e0792919061121a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f59565b505050565b6060610e9d8484600085610fe8565b90505b9392505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f34846323b872dd60e01b858585604051602401610e079392919061119d565b50505050565b610e898363a9059cbb60e01b8484604051602401610e0792919061121a565b6000610fae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e8e9092919063ffffffff16565b805190915015610e895780806020019051810190610fcc919061111f565b610e895760405162461bcd60e51b815260040161027d90611423565b60608247101561100a5760405162461bcd60e51b815260040161027d90611323565b611013856110a8565b61102f5760405162461bcd60e51b815260040161027d906113ec565b600080866001600160a01b0316858760405161104b9190611153565b60006040518083038185875af1925050503d8060008114611088576040519150601f19603f3d011682016040523d82523d6000602084013e61108d565b606091505b509150915061109d8282866110ae565b979650505050505050565b3b151590565b606083156110bd575081610ea0565b8251156110cd5782518084602001fd5b8160405162461bcd60e51b815260040161027d919061123e565b6000602082840312156110f8578081fd5b8135610ea081611509565b600060208284031215611114578081fd5b8135610ea08161151e565b600060208284031215611130578081fd5b8151610ea08161151e565b60006020828403121561114c578081fd5b5051919050565b600082516111658184602087016114dd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261125d8160408501602087016114dd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252600a908201527f4f6e6c79206f776e657200000000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f4275726e65722069732070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156114f85781810151838201526020016114e0565b83811115610f345750506000910152565b6001600160a01b0381168114610c9257600080fd5b8015158114610c9257600080fdfea26469706673582212203801116be5a5014d32dd09094ef60d9dc03fb46630781d06dc3cf3e9d0a2524c64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063d95315b7116100b2578063f0d85c8911610081578063f2fde38b11610066578063f2fde38b14610202578063f7260d3e14610215578063fc202cfd1461021d5761011b565b8063f0d85c89146101e7578063f170c85c146101fa5761011b565b8063d95315b7146101b1578063db2f5f79146101b9578063dcabf86b146101cc578063ec88ed4a146101df5761011b565b80639c868ac0116100ee5780639c868ac01461017b578063a0db86f914610183578063a3029aca14610196578063ae8747a0146101a95761011b565b80630959950414610120578063715018a61461013557806389afcb441461013d5780638da5cb5b14610166575b600080fd5b61013361012e366004611103565b610230565b005b6101336102c8565b61015061014b3660046110e7565b610313565b60405161015d9190611233565b60405180910390f35b61016e610797565b60405161015d919061116f565b6101506107a6565b6101336101913660046110e7565b6107c7565b6101336101a43660046110e7565b610840565b61016e61097d565b61016e61098c565b6101506101c73660046110e7565b61099b565b6101336101da3660046110e7565b610b06565b61016e610b8d565b6101336101f53660046110e7565b610b9c565b61016e610c15565b6101336102103660046110e7565b610c24565b61016e610c95565b61013361022b3660046110e7565b610ca4565b610238610797565b6001600160a01b0316336001600160a01b0316148061026157506005546001600160a01b031633145b6102865760405162461bcd60e51b815260040161027d9061128f565b60405180910390fd5b50600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6102d0610ea7565b6001600160a01b03166102e1610797565b6001600160a01b0316146103075760405162461bcd60e51b815260040161027d906113b7565b6103116000610eab565b565b60075460009074010000000000000000000000000000000000000000900460ff16156103515760405162461bcd60e51b815260040161027d90611380565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a082319061039990339060040161116f565b60206040518083038186803b1580156103b157600080fd5b505afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e9919061113b565b90506000816103fd57600092505050610792565b6104126001600160a01b038516333085610f13565b6001546001600160a01b0385811691161461058c576001600160a01b0380851660009081526004602090815260408083206002549094168352929052205460ff166104e357600254610491906001600160a01b0386811691167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610d2b565b6001600160a01b03808516600090815260046020908152604080832060025490941683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6002546001546040517ffe0291560000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263fe029156926105389289929091169087906000906004016111c1565b602060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a919061113b565b505b6003546001546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0392831692635ed8bda59216907373a210637f6f6b7005512677ba6b3c96bb4aa44b9082906370a08231906105f890309060040161116f565b60206040518083038186803b15801561061057600080fd5b505afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610648919061113b565b6000306040518663ffffffff1660e01b815260040161066b9594939291906111ea565b602060405180830381600087803b15801561068557600080fd5b505af1158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd919061113b565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815261078b916001600160a01b0316907373a210637f6f6b7005512677ba6b3c96bb4aa44b906370a082319061071f90309060040161116f565b60206040518083038186803b15801561073757600080fd5b505afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f919061113b565b7373a210637f6f6b7005512677ba6b3c96bb4aa44b9190610f3a565b6001925050505b919050565b6000546001600160a01b031690565b60075474010000000000000000000000000000000000000000900460ff1681565b6107cf610ea7565b6001600160a01b03166107e0610797565b6001600160a01b0316146108065760405162461bcd60e51b815260040161027d906113b7565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610848610797565b6001600160a01b0316336001600160a01b0316148061087157506005546001600160a01b031633145b61088d5760405162461bcd60e51b815260040161027d9061128f565b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03838116919091179091556001546040517f095ea7b300000000000000000000000000000000000000000000000000000000815291169063095ea7b3906109279084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060040161121a565b602060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610979919061111f565b5050565b6003546001600160a01b031681565b6007546001600160a01b031681565b60006109a5610797565b6001600160a01b0316336001600160a01b031614806109ce57506005546001600160a01b031633145b6109ea5760405162461bcd60e51b815260040161027d9061128f565b6007546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038085169263a9059cbb9291169083906370a0823190610a3e90309060040161116f565b60206040518083038186803b158015610a5657600080fd5b505afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e919061113b565b6040518363ffffffff1660e01b8152600401610aab92919061121a565b602060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd919061111f565b50600192915050565b610b0e610797565b6001600160a01b0316336001600160a01b03161480610b3757506005546001600160a01b031633145b610b535760405162461bcd60e51b815260040161027d9061128f565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b610ba4610ea7565b6001600160a01b0316610bb5610797565b6001600160a01b031614610bdb5760405162461bcd60e51b815260040161027d906113b7565b600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b610c2c610ea7565b6001600160a01b0316610c3d610797565b6001600160a01b031614610c635760405162461bcd60e51b815260040161027d906113b7565b6001600160a01b038116610c895760405162461bcd60e51b815260040161027d906112c6565b610c9281610eab565b50565b6006546001600160a01b031681565b610cac610797565b6001600160a01b0316336001600160a01b03161480610cd557506005546001600160a01b031633145b610cf15760405162461bcd60e51b815260040161027d9061128f565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b801580610dcc57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610d7a9030908690600401611183565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061113b565b155b610de85760405162461bcd60e51b815260040161027d90611480565b610e898363095ea7b360e01b8484604051602401610e0792919061121a565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f59565b505050565b6060610e9d8484600085610fe8565b90505b9392505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f34846323b872dd60e01b858585604051602401610e079392919061119d565b50505050565b610e898363a9059cbb60e01b8484604051602401610e0792919061121a565b6000610fae826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e8e9092919063ffffffff16565b805190915015610e895780806020019051810190610fcc919061111f565b610e895760405162461bcd60e51b815260040161027d90611423565b60608247101561100a5760405162461bcd60e51b815260040161027d90611323565b611013856110a8565b61102f5760405162461bcd60e51b815260040161027d906113ec565b600080866001600160a01b0316858760405161104b9190611153565b60006040518083038185875af1925050503d8060008114611088576040519150601f19603f3d011682016040523d82523d6000602084013e61108d565b606091505b509150915061109d8282866110ae565b979650505050505050565b3b151590565b606083156110bd575081610ea0565b8251156110cd5782518084602001fd5b8160405162461bcd60e51b815260040161027d919061123e565b6000602082840312156110f8578081fd5b8135610ea081611509565b600060208284031215611114578081fd5b8135610ea08161151e565b600060208284031215611130578081fd5b8151610ea08161151e565b60006020828403121561114c578081fd5b5051919050565b600082516111658184602087016114dd565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261125d8160408501602087016114dd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252600a908201527f4f6e6c79206f776e657200000000000000000000000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f4275726e65722069732070617573656400000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b60005b838110156114f85781810151838201526020016114e0565b83811115610f345750506000910152565b6001600160a01b0381168114610c9257600080fd5b8015158114610c9257600080fdfea26469706673582212203801116be5a5014d32dd09094ef60d9dc03fb46630781d06dc3cf3e9d0a2524c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3611,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "baseToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)727"
      },
      {
        "astId": 3627,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "MobiusWrapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWrapper)1322"
      },
      {
        "astId": 3630,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "MinimaRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Minima)3595"
      },
      {
        "astId": 3636,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "isApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3638,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "emergencyOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3640,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "receiver",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3642,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "recoveryReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3644,
        "contract": "contracts/MobiusBaseBurner.sol:MobiusBaseBurner",
        "label": "is_killed",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)727": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWrapper)1322": {
        "encoding": "inplace",
        "label": "contract IWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(Minima)3595": {
        "encoding": "inplace",
        "label": "contract Minima",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      }
    }
  }
}